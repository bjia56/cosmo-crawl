name: Build DCSS

on:
  workflow_dispatch:
    inputs:
      debug_interactive:
        required: false
        type: boolean
  push:
    branches: ["main"]

env:
  COSMOPOLITAN_VERSION: 3.9.7
  NCURSES_VERSION: 6.4
  DCSS_VERSION: 0.32.1

jobs:
  build:
    name: Build DCSS ${{ matrix.arch }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [x86_64, aarch64]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup cosmocc
        uses: bjia56/setup-cosmocc@v0.0.3
        with:
          version: ${{ env.COSMOPOLITAN_VERSION }}

      - name: Fixup Cosmopolitan toolchain
        run: |
          cd $(dirname $(which cosmocc))

          chmod +x cosmoranlib
          ln -s cosmoranlib ${{ matrix.arch }}-unknown-cosmo-ranlib

          ln -s ${{ matrix.arch }}-unknown-cosmo-cc ${{ matrix.arch }}-unknown-cosmo-gcc
          ln -s ${{ matrix.arch }}-unknown-cosmo-c++ ${{ matrix.arch }}-unknown-cosmo-g++

          # enable rtti, exceptions
          which ${{ matrix.arch }}-unknown-cosmo-c++ | xargs sed -i 's/fno\-rtti//g'
          which ${{ matrix.arch }}-unknown-cosmo-c++ | xargs sed -i 's/fno\-exceptions//g'

      - name: Install some packages
        run: |
          export DEBIAN_FRONTEND=noninteractive
          sudo apt update
          sudo apt -y install wget pkg-config git ncurses-bin ncurses-term

      - name: Build ncurses
        run: |
          # this step is the same for both architectures, since it's easier to compile ncurses jointly

          wget https://github.com/bjia56/build-dependencies/releases/download/portable-python/ncurses-${{ env.NCURSES_VERSION }}.tar.gz

          tar xf ncurses-${{ env.NCURSES_VERSION }}.tar.gz
          cd ncurses-${{ env.NCURSES_VERSION }}

          sudo mkdir /usr/x86_64-unknown-cosmo
          CC=cosmocc CXX=cosmoc++ AR=$(command -v cosmoar) CFLAGS="-std=c89" ./configure --with-normal --without-progs --enable-overwrite --disable-stripping --enable-widec --with-termlib --disable-database --with-fallbacks=xterm,xterm-256color,screen-256color,linux,vt100 --prefix=/usr/x86_64-unknown-cosmo
          make -j4
          sudo make install

          sudo cp -r /usr/x86_64-unknown-cosmo /usr/aarch64-unknown-cosmo
          sudo rm /usr/aarch64-unknown-cosmo/lib/lib*.a
          sudo cp lib/.aarch64/lib*.a /usr/aarch64-unknown-cosmo/lib

          # DCSS wants to look for headers in this subdir...
          sudo ln -s /usr/x86_64-unknown-cosmo/include/ /usr/x86_64-unknown-cosmo/include/ncursesw
          sudo ln -s /usr/aarch64-unknown-cosmo/include/ /usr/aarch64-unknown-cosmo/include/ncursesw

      - name: Build DCSS
        run: |
          git clone https://github.com/crawl/crawl.git
          cd crawl
          git checkout ${{ env.DCSS_VERSION }}
          git submodule update --init
          patch -p1 < ${{ github.workspace }}/dcss.patch

          cd crawl-ref/source

          # disable -pipe flag in the compiler
          grep -rl "\-pipe" | xargs sed -i 's/\-pipe//g'

          # prepare zip fs
          sudo mkdir /zip
          sudo cp -r dat /zip/dat

          # build
          CROSSHOST=${{ matrix.arch }}-unknown-cosmo DATADIR=/zip/dat-${{ matrix.arch }} make V=1 -j4
          mv crawl crawl-${{ matrix.arch }}
          mv dat dat-${{ matrix.arch }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: crawl-${{ matrix.arch }}
          path: ./crawl/crawl-ref/source/crawl-${{ matrix.arch }}
          
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dat-${{ matrix.arch }}
          path: ./crawl/crawl-ref/source/dat-${{ matrix.arch }}
          
      - name: Interactive debugging
        uses: fawazahmed0/action-debug-vscode@v3
        if: ${{ always() && inputs.debug_interactive }}
    
  apelink:
    name: Apelink DCSS
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup cosmocc
        uses: bjia56/setup-cosmocc@v0.0.3
        with:
          version: ${{ env.COSMOPOLITAN_VERSION }}
        
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          pattern: crawl-*
          path: /tmp/crawl/
          merge-multiple: true
  
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          pattern: dat-*
          path: /tmp/dat/
          merge-multiple: true
  
      - name: Apelink
        run: |
          cosmo_bin=$(dirname $(which cosmocc))
          $(which apelink) \
            -l ${cosmo_bin}/ape-x86_64.elf \
            -l ${cosmo_bin}/ape-aarch64.elf \
            -M ${cosmo_bin}/ape-m1.c \
            -o crawl.com \
            /tmp/crawl/crawl-x86_64 \
            /tmp/crawl/crawl-aarch64

          ls -lah /tmp/dat/

          sudo mkdir /zip
          sudo cp -r /tmp/dat/dat-* /zip/

          cd /zip
          zip -qr ${{ github.workspace }}/crawl.com dat-*

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: crawl.com
          path: ./crawl.com
