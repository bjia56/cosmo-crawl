name: Build DCSS

on:
  workflow_dispatch:
    inputs:
      debug_build:
        required: false
        type: boolean
      debug_link:
        required: false
        type: boolean
  push:
    branches: ["main"]
  workflow_call:
    inputs:
      dcss_version:
        required: false
        type: string

env:
  COSMOPOLITAN_VERSION: 4.0.0
  NCURSES_VERSION: 6.4
  DCSS_VERSION: ${{ inputs.dcss_version || '0.32.1' }}

jobs:
  build:
    name: Build DCSS ${{ matrix.arch }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [x86_64, aarch64]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup cosmocc
        uses: bjia56/setup-cosmocc@v0.0.3
        with:
          version: ${{ env.COSMOPOLITAN_VERSION }}

      - name: Fixup Cosmopolitan toolchain
        run: |
          cd $(dirname $(which cosmocc))

          chmod +x cosmoranlib
          ln -s cosmoranlib ${{ matrix.arch }}-unknown-cosmo-ranlib

          ln -s ${{ matrix.arch }}-unknown-cosmo-cc ${{ matrix.arch }}-unknown-cosmo-gcc
          ln -s ${{ matrix.arch }}-unknown-cosmo-c++ ${{ matrix.arch }}-unknown-cosmo-g++

          # enable rtti, exceptions
          which ${{ matrix.arch }}-unknown-cosmo-c++ | xargs sed -i 's/fno\-rtti//g'
          which ${{ matrix.arch }}-unknown-cosmo-c++ | xargs sed -i 's/fno\-exceptions//g'

      - name: Install some packages
        run: |
          export DEBIAN_FRONTEND=noninteractive
          sudo apt update
          sudo apt -y install wget pkg-config git ncurses-bin ncurses-term

      - name: Build ncurses
        run: |
          # this step is the same for both architectures, since it's easier to compile ncurses jointly

          wget https://github.com/bjia56/build-dependencies/releases/download/portable-python/ncurses-${{ env.NCURSES_VERSION }}.tar.gz

          tar xf ncurses-${{ env.NCURSES_VERSION }}.tar.gz
          cd ncurses-${{ env.NCURSES_VERSION }}

          sudo mkdir /usr/x86_64-unknown-cosmo
          CC=cosmocc CXX=cosmoc++ AR=$(command -v cosmoar) CFLAGS="-std=c89" ./configure --with-normal --without-progs --enable-overwrite --disable-stripping --enable-widec --with-termlib --disable-database --with-fallbacks=xterm,xterm-256color,screen-256color,linux,vt100 --prefix=/usr/x86_64-unknown-cosmo
          make -j4
          sudo make install

          sudo cp -r /usr/x86_64-unknown-cosmo /usr/aarch64-unknown-cosmo
          sudo rm /usr/aarch64-unknown-cosmo/lib/lib*.a
          sudo cp lib/.aarch64/lib*.a /usr/aarch64-unknown-cosmo/lib

          # DCSS wants to look for headers in this subdir...
          sudo ln -s /usr/x86_64-unknown-cosmo/include/ /usr/x86_64-unknown-cosmo/include/ncursesw
          sudo ln -s /usr/aarch64-unknown-cosmo/include/ /usr/aarch64-unknown-cosmo/include/ncursesw

      - name: Build DCSS
        run: |
          git clone https://github.com/crawl/crawl.git
          cd crawl
          git checkout ${{ env.DCSS_VERSION }}
          git submodule update --init
          patch -p1 < ${{ github.workspace }}/dcss.patch

          cd crawl-ref/source

          # build
          CROSSHOST=${{ matrix.arch }}-unknown-cosmo DATADIR=/zip/${{ matrix.arch }}/ make V=1 -j4
          mv crawl crawl-${{ matrix.arch }}

      - name: Upload crawl
        uses: actions/upload-artifact@v4
        with:
          name: crawl-${{ matrix.arch }}
          path: ./crawl/crawl-ref/source/crawl-${{ matrix.arch }}
          
      - name: Upload dat
        uses: actions/upload-artifact@v4
        with:
          name: dat-${{ matrix.arch }}
          path: ./crawl/crawl-ref/source/dat

      - name: Upload docs
        uses: actions/upload-artifact@v4
        with:
          name: docs-${{ matrix.arch }}
          path: ./crawl/crawl-ref/docs
          
      - name: Interactive debugging
        uses: fawazahmed0/action-debug-vscode@v3
        if: ${{ always() && inputs.debug_build }}
    
  apelink:
    name: Apelink DCSS
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup cosmocc
        uses: bjia56/setup-cosmocc@v0.0.3
        with:
          version: ${{ env.COSMOPOLITAN_VERSION }}
        
      - name: Download crawl
        uses: actions/download-artifact@v4
        with:
          pattern: crawl-*
          path: /tmp/crawl/
          merge-multiple: true
  
      - name: Download dat x86_64
        uses: actions/download-artifact@v4
        with:
          pattern: dat-x86_64
          path: /tmp
  
      - name: Download dat aarch64
        uses: actions/download-artifact@v4
        with:
          pattern: dat-aarch64
          path: /tmp
  
      - name: Download docs x86_64
        uses: actions/download-artifact@v4
        with:
          pattern: docs-x86_64
          path: /tmp

      - name: Download docs aarch64
        uses: actions/download-artifact@v4
        with:
          pattern: docs-aarch64
          path: /tmp
  
      - name: Apelink
        run: |
          cosmo_bin=$(dirname $(which cosmocc))
          $(which apelink) \
            -l ${cosmo_bin}/ape-x86_64.elf \
            -l ${cosmo_bin}/ape-aarch64.elf \
            -M ${cosmo_bin}/ape-m1.c \
            -o crawl.com \
            /tmp/crawl/crawl-x86_64 \
            /tmp/crawl/crawl-aarch64

          sudo mkdir -p /zip/x86_64
          sudo mkdir -p /zip/aarch64
          sudo cp -r /tmp/dat-x86_64 /zip/x86_64/dat
          sudo cp -r /tmp/dat-aarch64 /zip/aarch64/dat
          sudo cp -r /tmp/docs-x86_64 /zip/x86_64/docs
          sudo cp -r /tmp/docs-aarch64 /zip/aarch64/docs

          cd /zip
          zip -qr ${{ github.workspace }}/crawl.com *

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: crawl.com
          path: ./crawl.com
          
      - name: Interactive debugging
        uses: fawazahmed0/action-debug-vscode@v3
        if: ${{ always() && inputs.debug_link }}

  check:
    name: Check crawl.com ${{ matrix.os }} ${{ matrix.arch }}
    needs: apelink
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - runner: macos-13
            arch: x86_64
            os: MacOS
          - runner: macos-14
            arch: arm64
            os: MacOS
          - runner: ubuntu-latest
            arch: x86_64
            os: Linux
          - runner: windows-latest
            arch: x86_64
            os: Windows
          - runner: ubuntu-latest
            arch: x86_64
            os: FreeBSD
          - runner: ubuntu-latest
            arch: x86_64
            os: NetBSD
          - runner: ubuntu-latest
            arch: x86_64
            os: OpenBSD

    steps:
      - name: Set up cosmocc
        if: ${{ matrix.os == 'Linux' }}
        uses: bjia56/setup-cosmocc@v0.0.3

      - name: Checkout
        uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: crawl.com
          path: .

      - name: Mark executable
        shell: bash
        run: |
          chmod +x crawl.com

      - name: Check crawl.com
        if: ${{ !contains(matrix.os, 'BSD') }}
        shell: bash
        run: |
          ./crawl.com -version

      - name: Start VM
        if: ${{ matrix.os == 'FreeBSD' }}
        uses: vmactions/freebsd-vm@v1
        with:
          sync: nfs

      - name: Start VM
        if: ${{ matrix.os == 'NetBSD' }}
        uses: vmactions/netbsd-vm@v1
        with:
          sync: nfs

      - name: Start VM
        if: ${{ matrix.os == 'OpenBSD' }}
        uses: vmactions/openbsd-vm@v1
        with:
          sync: nfs
          release: 7.3

      - name: Check crawl.com
        if: ${{ matrix.os == 'FreeBSD' }}
        shell: freebsd {0}
        run: |
          cd ${{ github.workspace }}
          ./crawl.com -version

      - name: Check crawl.com
        if: ${{ matrix.os == 'NetBSD' }}
        shell: netbsd {0}
        run: |
          cd ${{ github.workspace }}
          ./crawl.com -version

      - name: Check crawl.com
        if: ${{ matrix.os == 'OpenBSD' }}
        shell: openbsd {0}
        run: |
          cd ${{ github.workspace }}
          ./crawl.com -version